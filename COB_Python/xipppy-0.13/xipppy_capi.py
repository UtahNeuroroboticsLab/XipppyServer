# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_xipppy_capi', [dirname(__file__)])
        except ImportError:
            import _xipppy_capi
            return _xipppy_capi
        if fp is not None:
            try:
                _mod = imp.load_module('_xipppy_capi', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _xipppy_capi = swig_import_helper()
    del swig_import_helper
else:
    import _xipppy_capi
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import array
import itertools

STRLEN_LABEL = _xipppy_capi.STRLEN_LABEL
SEGMENT_WF_LEN = _xipppy_capi.SEGMENT_WF_LEN
class SosStage_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SosStage_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SosStage_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["b0"] = _xipppy_capi.SosStage_t_b0_set
    __swig_getmethods__["b0"] = _xipppy_capi.SosStage_t_b0_get
    if _newclass:b0 = _swig_property(_xipppy_capi.SosStage_t_b0_get, _xipppy_capi.SosStage_t_b0_set)
    __swig_setmethods__["b1"] = _xipppy_capi.SosStage_t_b1_set
    __swig_getmethods__["b1"] = _xipppy_capi.SosStage_t_b1_get
    if _newclass:b1 = _swig_property(_xipppy_capi.SosStage_t_b1_get, _xipppy_capi.SosStage_t_b1_set)
    __swig_setmethods__["a1"] = _xipppy_capi.SosStage_t_a1_set
    __swig_getmethods__["a1"] = _xipppy_capi.SosStage_t_a1_get
    if _newclass:a1 = _swig_property(_xipppy_capi.SosStage_t_a1_get, _xipppy_capi.SosStage_t_a1_set)
    __swig_setmethods__["a2"] = _xipppy_capi.SosStage_t_a2_set
    __swig_getmethods__["a2"] = _xipppy_capi.SosStage_t_a2_get
    if _newclass:a2 = _swig_property(_xipppy_capi.SosStage_t_a2_get, _xipppy_capi.SosStage_t_a2_set)
    def __init__(self): 
        this = _xipppy_capi.new_SosStage_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xipppy_capi.delete_SosStage_t
    __del__ = lambda self : None;
SosStage_t_swigregister = _xipppy_capi.SosStage_t_swigregister
SosStage_t_swigregister(SosStage_t)

class SosFilterDesc_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SosFilterDesc_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SosFilterDesc_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["label"] = _xipppy_capi.SosFilterDesc_t_label_set
    __swig_getmethods__["label"] = _xipppy_capi.SosFilterDesc_t_label_get
    if _newclass:label = _swig_property(_xipppy_capi.SosFilterDesc_t_label_get, _xipppy_capi.SosFilterDesc_t_label_set)
    __swig_setmethods__["center"] = _xipppy_capi.SosFilterDesc_t_center_set
    __swig_getmethods__["center"] = _xipppy_capi.SosFilterDesc_t_center_get
    if _newclass:center = _swig_property(_xipppy_capi.SosFilterDesc_t_center_get, _xipppy_capi.SosFilterDesc_t_center_set)
    __swig_setmethods__["lowCutoff"] = _xipppy_capi.SosFilterDesc_t_lowCutoff_set
    __swig_getmethods__["lowCutoff"] = _xipppy_capi.SosFilterDesc_t_lowCutoff_get
    if _newclass:lowCutoff = _swig_property(_xipppy_capi.SosFilterDesc_t_lowCutoff_get, _xipppy_capi.SosFilterDesc_t_lowCutoff_set)
    __swig_setmethods__["highCutoff"] = _xipppy_capi.SosFilterDesc_t_highCutoff_set
    __swig_getmethods__["highCutoff"] = _xipppy_capi.SosFilterDesc_t_highCutoff_get
    if _newclass:highCutoff = _swig_property(_xipppy_capi.SosFilterDesc_t_highCutoff_get, _xipppy_capi.SosFilterDesc_t_highCutoff_set)
    __swig_setmethods__["centerOrder"] = _xipppy_capi.SosFilterDesc_t_centerOrder_set
    __swig_getmethods__["centerOrder"] = _xipppy_capi.SosFilterDesc_t_centerOrder_get
    if _newclass:centerOrder = _swig_property(_xipppy_capi.SosFilterDesc_t_centerOrder_get, _xipppy_capi.SosFilterDesc_t_centerOrder_set)
    __swig_setmethods__["centerFlags"] = _xipppy_capi.SosFilterDesc_t_centerFlags_set
    __swig_getmethods__["centerFlags"] = _xipppy_capi.SosFilterDesc_t_centerFlags_get
    if _newclass:centerFlags = _swig_property(_xipppy_capi.SosFilterDesc_t_centerFlags_get, _xipppy_capi.SosFilterDesc_t_centerFlags_set)
    __swig_setmethods__["lowOrder"] = _xipppy_capi.SosFilterDesc_t_lowOrder_set
    __swig_getmethods__["lowOrder"] = _xipppy_capi.SosFilterDesc_t_lowOrder_get
    if _newclass:lowOrder = _swig_property(_xipppy_capi.SosFilterDesc_t_lowOrder_get, _xipppy_capi.SosFilterDesc_t_lowOrder_set)
    __swig_setmethods__["lowFlags"] = _xipppy_capi.SosFilterDesc_t_lowFlags_set
    __swig_getmethods__["lowFlags"] = _xipppy_capi.SosFilterDesc_t_lowFlags_get
    if _newclass:lowFlags = _swig_property(_xipppy_capi.SosFilterDesc_t_lowFlags_get, _xipppy_capi.SosFilterDesc_t_lowFlags_set)
    __swig_setmethods__["highOrder"] = _xipppy_capi.SosFilterDesc_t_highOrder_set
    __swig_getmethods__["highOrder"] = _xipppy_capi.SosFilterDesc_t_highOrder_get
    if _newclass:highOrder = _swig_property(_xipppy_capi.SosFilterDesc_t_highOrder_get, _xipppy_capi.SosFilterDesc_t_highOrder_set)
    __swig_setmethods__["highFlags"] = _xipppy_capi.SosFilterDesc_t_highFlags_set
    __swig_getmethods__["highFlags"] = _xipppy_capi.SosFilterDesc_t_highFlags_get
    if _newclass:highFlags = _swig_property(_xipppy_capi.SosFilterDesc_t_highFlags_get, _xipppy_capi.SosFilterDesc_t_highFlags_set)
    __swig_setmethods__["maxStages"] = _xipppy_capi.SosFilterDesc_t_maxStages_set
    __swig_getmethods__["maxStages"] = _xipppy_capi.SosFilterDesc_t_maxStages_get
    if _newclass:maxStages = _swig_property(_xipppy_capi.SosFilterDesc_t_maxStages_get, _xipppy_capi.SosFilterDesc_t_maxStages_set)
    __swig_setmethods__["numStages"] = _xipppy_capi.SosFilterDesc_t_numStages_set
    __swig_getmethods__["numStages"] = _xipppy_capi.SosFilterDesc_t_numStages_get
    if _newclass:numStages = _swig_property(_xipppy_capi.SosFilterDesc_t_numStages_get, _xipppy_capi.SosFilterDesc_t_numStages_set)
    __swig_getmethods__["stages"] = _xipppy_capi.SosFilterDesc_t_stages_get
    if _newclass:stages = _swig_property(_xipppy_capi.SosFilterDesc_t_stages_get)
    def __init__(self, *args): 
        this = _xipppy_capi.new_SosFilterDesc_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xipppy_capi.delete_SosFilterDesc_t
    __del__ = lambda self : None;
    def get_stage(self, *args) -> "SosStage_t *" : return _xipppy_capi.SosFilterDesc_t_get_stage(self, *args)
    def set_stage(self, *args) -> "void" : return _xipppy_capi.SosFilterDesc_t_set_stage(self, *args)
SosFilterDesc_t_swigregister = _xipppy_capi.SosFilterDesc_t_swigregister
SosFilterDesc_t_swigregister(SosFilterDesc_t)

class XippSegmentDataPacketFixed_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XippSegmentDataPacketFixed_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XippSegmentDataPacketFixed_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["totalSizeQuads"] = _xipppy_capi.XippSegmentDataPacketFixed_t_totalSizeQuads_set
    __swig_getmethods__["totalSizeQuads"] = _xipppy_capi.XippSegmentDataPacketFixed_t_totalSizeQuads_get
    if _newclass:totalSizeQuads = _swig_property(_xipppy_capi.XippSegmentDataPacketFixed_t_totalSizeQuads_get, _xipppy_capi.XippSegmentDataPacketFixed_t_totalSizeQuads_set)
    __swig_setmethods__["processorID"] = _xipppy_capi.XippSegmentDataPacketFixed_t_processorID_set
    __swig_getmethods__["processorID"] = _xipppy_capi.XippSegmentDataPacketFixed_t_processorID_get
    if _newclass:processorID = _swig_property(_xipppy_capi.XippSegmentDataPacketFixed_t_processorID_get, _xipppy_capi.XippSegmentDataPacketFixed_t_processorID_set)
    __swig_setmethods__["moduleID"] = _xipppy_capi.XippSegmentDataPacketFixed_t_moduleID_set
    __swig_getmethods__["moduleID"] = _xipppy_capi.XippSegmentDataPacketFixed_t_moduleID_get
    if _newclass:moduleID = _swig_property(_xipppy_capi.XippSegmentDataPacketFixed_t_moduleID_get, _xipppy_capi.XippSegmentDataPacketFixed_t_moduleID_set)
    __swig_setmethods__["outputStreamID"] = _xipppy_capi.XippSegmentDataPacketFixed_t_outputStreamID_set
    __swig_getmethods__["outputStreamID"] = _xipppy_capi.XippSegmentDataPacketFixed_t_outputStreamID_get
    if _newclass:outputStreamID = _swig_property(_xipppy_capi.XippSegmentDataPacketFixed_t_outputStreamID_get, _xipppy_capi.XippSegmentDataPacketFixed_t_outputStreamID_set)
    __swig_setmethods__["timeDooDas"] = _xipppy_capi.XippSegmentDataPacketFixed_t_timeDooDas_set
    __swig_getmethods__["timeDooDas"] = _xipppy_capi.XippSegmentDataPacketFixed_t_timeDooDas_get
    if _newclass:timeDooDas = _swig_property(_xipppy_capi.XippSegmentDataPacketFixed_t_timeDooDas_get, _xipppy_capi.XippSegmentDataPacketFixed_t_timeDooDas_set)
    __swig_setmethods__["streamType"] = _xipppy_capi.XippSegmentDataPacketFixed_t_streamType_set
    __swig_getmethods__["streamType"] = _xipppy_capi.XippSegmentDataPacketFixed_t_streamType_get
    if _newclass:streamType = _swig_property(_xipppy_capi.XippSegmentDataPacketFixed_t_streamType_get, _xipppy_capi.XippSegmentDataPacketFixed_t_streamType_set)
    __swig_setmethods__["flags"] = _xipppy_capi.XippSegmentDataPacketFixed_t_flags_set
    __swig_getmethods__["flags"] = _xipppy_capi.XippSegmentDataPacketFixed_t_flags_get
    if _newclass:flags = _swig_property(_xipppy_capi.XippSegmentDataPacketFixed_t_flags_get, _xipppy_capi.XippSegmentDataPacketFixed_t_flags_set)
    __swig_setmethods__["class_id"] = _xipppy_capi.XippSegmentDataPacketFixed_t_class_id_set
    __swig_getmethods__["class_id"] = _xipppy_capi.XippSegmentDataPacketFixed_t_class_id_get
    if _newclass:class_id = _swig_property(_xipppy_capi.XippSegmentDataPacketFixed_t_class_id_get, _xipppy_capi.XippSegmentDataPacketFixed_t_class_id_set)
    __swig_setmethods__["sample_count"] = _xipppy_capi.XippSegmentDataPacketFixed_t_sample_count_set
    __swig_getmethods__["sample_count"] = _xipppy_capi.XippSegmentDataPacketFixed_t_sample_count_get
    if _newclass:sample_count = _swig_property(_xipppy_capi.XippSegmentDataPacketFixed_t_sample_count_get, _xipppy_capi.XippSegmentDataPacketFixed_t_sample_count_set)
    __swig_setmethods__["i16"] = _xipppy_capi.XippSegmentDataPacketFixed_t_i16_set
    __swig_getmethods__["i16"] = _xipppy_capi.XippSegmentDataPacketFixed_t_i16_get
    if _newclass:i16 = _swig_property(_xipppy_capi.XippSegmentDataPacketFixed_t_i16_get, _xipppy_capi.XippSegmentDataPacketFixed_t_i16_set)
    def __init__(self): 
        this = _xipppy_capi.new_XippSegmentDataPacketFixed_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xipppy_capi.delete_XippSegmentDataPacketFixed_t
    __del__ = lambda self : None;
XippSegmentDataPacketFixed_t_swigregister = _xipppy_capi.XippSegmentDataPacketFixed_t_swigregister
XippSegmentDataPacketFixed_t_swigregister(XippSegmentDataPacketFixed_t)

class XippDigitalEventPacket_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XippDigitalEventPacket_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XippDigitalEventPacket_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["totalSizeQuads"] = _xipppy_capi.XippDigitalEventPacket_t_totalSizeQuads_set
    __swig_getmethods__["totalSizeQuads"] = _xipppy_capi.XippDigitalEventPacket_t_totalSizeQuads_get
    if _newclass:totalSizeQuads = _swig_property(_xipppy_capi.XippDigitalEventPacket_t_totalSizeQuads_get, _xipppy_capi.XippDigitalEventPacket_t_totalSizeQuads_set)
    __swig_setmethods__["processorID"] = _xipppy_capi.XippDigitalEventPacket_t_processorID_set
    __swig_getmethods__["processorID"] = _xipppy_capi.XippDigitalEventPacket_t_processorID_get
    if _newclass:processorID = _swig_property(_xipppy_capi.XippDigitalEventPacket_t_processorID_get, _xipppy_capi.XippDigitalEventPacket_t_processorID_set)
    __swig_setmethods__["moduleID"] = _xipppy_capi.XippDigitalEventPacket_t_moduleID_set
    __swig_getmethods__["moduleID"] = _xipppy_capi.XippDigitalEventPacket_t_moduleID_get
    if _newclass:moduleID = _swig_property(_xipppy_capi.XippDigitalEventPacket_t_moduleID_get, _xipppy_capi.XippDigitalEventPacket_t_moduleID_set)
    __swig_setmethods__["outputStreamID"] = _xipppy_capi.XippDigitalEventPacket_t_outputStreamID_set
    __swig_getmethods__["outputStreamID"] = _xipppy_capi.XippDigitalEventPacket_t_outputStreamID_get
    if _newclass:outputStreamID = _swig_property(_xipppy_capi.XippDigitalEventPacket_t_outputStreamID_get, _xipppy_capi.XippDigitalEventPacket_t_outputStreamID_set)
    __swig_setmethods__["timeDooDas"] = _xipppy_capi.XippDigitalEventPacket_t_timeDooDas_set
    __swig_getmethods__["timeDooDas"] = _xipppy_capi.XippDigitalEventPacket_t_timeDooDas_get
    if _newclass:timeDooDas = _swig_property(_xipppy_capi.XippDigitalEventPacket_t_timeDooDas_get, _xipppy_capi.XippDigitalEventPacket_t_timeDooDas_set)
    __swig_setmethods__["streamType"] = _xipppy_capi.XippDigitalEventPacket_t_streamType_set
    __swig_getmethods__["streamType"] = _xipppy_capi.XippDigitalEventPacket_t_streamType_get
    if _newclass:streamType = _swig_property(_xipppy_capi.XippDigitalEventPacket_t_streamType_get, _xipppy_capi.XippDigitalEventPacket_t_streamType_set)
    __swig_setmethods__["flags"] = _xipppy_capi.XippDigitalEventPacket_t_flags_set
    __swig_getmethods__["flags"] = _xipppy_capi.XippDigitalEventPacket_t_flags_get
    if _newclass:flags = _swig_property(_xipppy_capi.XippDigitalEventPacket_t_flags_get, _xipppy_capi.XippDigitalEventPacket_t_flags_set)
    __swig_setmethods__["reason"] = _xipppy_capi.XippDigitalEventPacket_t_reason_set
    __swig_getmethods__["reason"] = _xipppy_capi.XippDigitalEventPacket_t_reason_get
    if _newclass:reason = _swig_property(_xipppy_capi.XippDigitalEventPacket_t_reason_get, _xipppy_capi.XippDigitalEventPacket_t_reason_set)
    __swig_setmethods__["reserved"] = _xipppy_capi.XippDigitalEventPacket_t_reserved_set
    __swig_getmethods__["reserved"] = _xipppy_capi.XippDigitalEventPacket_t_reserved_get
    if _newclass:reserved = _swig_property(_xipppy_capi.XippDigitalEventPacket_t_reserved_get, _xipppy_capi.XippDigitalEventPacket_t_reserved_set)
    __swig_setmethods__["parallel"] = _xipppy_capi.XippDigitalEventPacket_t_parallel_set
    __swig_getmethods__["parallel"] = _xipppy_capi.XippDigitalEventPacket_t_parallel_get
    if _newclass:parallel = _swig_property(_xipppy_capi.XippDigitalEventPacket_t_parallel_get, _xipppy_capi.XippDigitalEventPacket_t_parallel_set)
    __swig_setmethods__["sma1"] = _xipppy_capi.XippDigitalEventPacket_t_sma1_set
    __swig_getmethods__["sma1"] = _xipppy_capi.XippDigitalEventPacket_t_sma1_get
    if _newclass:sma1 = _swig_property(_xipppy_capi.XippDigitalEventPacket_t_sma1_get, _xipppy_capi.XippDigitalEventPacket_t_sma1_set)
    __swig_setmethods__["sma2"] = _xipppy_capi.XippDigitalEventPacket_t_sma2_set
    __swig_getmethods__["sma2"] = _xipppy_capi.XippDigitalEventPacket_t_sma2_get
    if _newclass:sma2 = _swig_property(_xipppy_capi.XippDigitalEventPacket_t_sma2_get, _xipppy_capi.XippDigitalEventPacket_t_sma2_set)
    __swig_setmethods__["sma3"] = _xipppy_capi.XippDigitalEventPacket_t_sma3_set
    __swig_getmethods__["sma3"] = _xipppy_capi.XippDigitalEventPacket_t_sma3_get
    if _newclass:sma3 = _swig_property(_xipppy_capi.XippDigitalEventPacket_t_sma3_get, _xipppy_capi.XippDigitalEventPacket_t_sma3_set)
    __swig_setmethods__["sma4"] = _xipppy_capi.XippDigitalEventPacket_t_sma4_set
    __swig_getmethods__["sma4"] = _xipppy_capi.XippDigitalEventPacket_t_sma4_get
    if _newclass:sma4 = _swig_property(_xipppy_capi.XippDigitalEventPacket_t_sma4_get, _xipppy_capi.XippDigitalEventPacket_t_sma4_set)
    __swig_setmethods__["PADDING"] = _xipppy_capi.XippDigitalEventPacket_t_PADDING_set
    __swig_getmethods__["PADDING"] = _xipppy_capi.XippDigitalEventPacket_t_PADDING_get
    if _newclass:PADDING = _swig_property(_xipppy_capi.XippDigitalEventPacket_t_PADDING_get, _xipppy_capi.XippDigitalEventPacket_t_PADDING_set)
    def __init__(self): 
        this = _xipppy_capi.new_XippDigitalEventPacket_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xipppy_capi.delete_XippDigitalEventPacket_t
    __del__ = lambda self : None;
XippDigitalEventPacket_t_swigregister = _xipppy_capi.XippDigitalEventPacket_t_swigregister
XippDigitalEventPacket_t_swigregister(XippDigitalEventPacket_t)

class StimSeq_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StimSeq_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StimSeq_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["elec"] = _xipppy_capi.StimSeq_t_elec_set
    __swig_getmethods__["elec"] = _xipppy_capi.StimSeq_t_elec_get
    if _newclass:elec = _swig_property(_xipppy_capi.StimSeq_t_elec_get, _xipppy_capi.StimSeq_t_elec_set)
    __swig_setmethods__["length"] = _xipppy_capi.StimSeq_t_length_set
    __swig_getmethods__["length"] = _xipppy_capi.StimSeq_t_length_get
    if _newclass:length = _swig_property(_xipppy_capi.StimSeq_t_length_get, _xipppy_capi.StimSeq_t_length_set)
    __swig_setmethods__["array"] = _xipppy_capi.StimSeq_t_array_set
    __swig_getmethods__["array"] = _xipppy_capi.StimSeq_t_array_get
    if _newclass:array = _swig_property(_xipppy_capi.StimSeq_t_array_get, _xipppy_capi.StimSeq_t_array_set)
    def fill_array(self, *args) -> "void" : return _xipppy_capi.StimSeq_t_fill_array(self, *args)
    def __init__(self): 
        this = _xipppy_capi.new_StimSeq_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xipppy_capi.delete_StimSeq_t
    __del__ = lambda self : None;
StimSeq_t_swigregister = _xipppy_capi.StimSeq_t_swigregister
StimSeq_t_swigregister(StimSeq_t)

class XippTransceiverCommand_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XippTransceiverCommand_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XippTransceiverCommand_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["command"] = _xipppy_capi.XippTransceiverCommand_t_command_set
    __swig_getmethods__["command"] = _xipppy_capi.XippTransceiverCommand_t_command_get
    if _newclass:command = _swig_property(_xipppy_capi.XippTransceiverCommand_t_command_get, _xipppy_capi.XippTransceiverCommand_t_command_set)
    __swig_setmethods__["length"] = _xipppy_capi.XippTransceiverCommand_t_length_set
    __swig_getmethods__["length"] = _xipppy_capi.XippTransceiverCommand_t_length_get
    if _newclass:length = _swig_property(_xipppy_capi.XippTransceiverCommand_t_length_get, _xipppy_capi.XippTransceiverCommand_t_length_set)
    __swig_setmethods__["data"] = _xipppy_capi.XippTransceiverCommand_t_data_set
    __swig_getmethods__["data"] = _xipppy_capi.XippTransceiverCommand_t_data_get
    if _newclass:data = _swig_property(_xipppy_capi.XippTransceiverCommand_t_data_get, _xipppy_capi.XippTransceiverCommand_t_data_set)
    def __init__(self): 
        this = _xipppy_capi.new_XippTransceiverCommand_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xipppy_capi.delete_XippTransceiverCommand_t
    __del__ = lambda self : None;
XippTransceiverCommand_t_swigregister = _xipppy_capi.XippTransceiverCommand_t_swigregister
XippTransceiverCommand_t_swigregister(XippTransceiverCommand_t)

class XippCalib_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XippCalib_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XippCalib_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timestamp"] = _xipppy_capi.XippCalib_t_timestamp_set
    __swig_getmethods__["timestamp"] = _xipppy_capi.XippCalib_t_timestamp_get
    if _newclass:timestamp = _swig_property(_xipppy_capi.XippCalib_t_timestamp_get, _xipppy_capi.XippCalib_t_timestamp_set)
    __swig_setmethods__["data"] = _xipppy_capi.XippCalib_t_data_set
    __swig_getmethods__["data"] = _xipppy_capi.XippCalib_t_data_get
    if _newclass:data = _swig_property(_xipppy_capi.XippCalib_t_data_get, _xipppy_capi.XippCalib_t_data_set)
    def __init__(self): 
        this = _xipppy_capi.new_XippCalib_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xipppy_capi.delete_XippCalib_t
    __del__ = lambda self : None;
XippCalib_t_swigregister = _xipppy_capi.XippCalib_t_swigregister
XippCalib_t_swigregister(XippCalib_t)

class SegmentDataArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SegmentDataArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SegmentDataArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _xipppy_capi.new_SegmentDataArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xipppy_capi.delete_SegmentDataArray
    __del__ = lambda self : None;
    def __getitem__(self, *args) -> "XippSegmentDataPacketFixed_t" : return _xipppy_capi.SegmentDataArray___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _xipppy_capi.SegmentDataArray___setitem__(self, *args)
    def cast(self) -> "XippSegmentDataPacketFixed_t *" : return _xipppy_capi.SegmentDataArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _xipppy_capi.SegmentDataArray_frompointer
    if _newclass:frompointer = staticmethod(_xipppy_capi.SegmentDataArray_frompointer)
SegmentDataArray_swigregister = _xipppy_capi.SegmentDataArray_swigregister
SegmentDataArray_swigregister(SegmentDataArray)

def SegmentDataArray_frompointer(*args) -> "SegmentDataArray *" :
  return _xipppy_capi.SegmentDataArray_frompointer(*args)
SegmentDataArray_frompointer = _xipppy_capi.SegmentDataArray_frompointer

class DigitalEventArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DigitalEventArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DigitalEventArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _xipppy_capi.new_DigitalEventArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xipppy_capi.delete_DigitalEventArray
    __del__ = lambda self : None;
    def __getitem__(self, *args) -> "XippDigitalEventPacket_t" : return _xipppy_capi.DigitalEventArray___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _xipppy_capi.DigitalEventArray___setitem__(self, *args)
    def cast(self) -> "XippDigitalEventPacket_t *" : return _xipppy_capi.DigitalEventArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _xipppy_capi.DigitalEventArray_frompointer
    if _newclass:frompointer = staticmethod(_xipppy_capi.DigitalEventArray_frompointer)
DigitalEventArray_swigregister = _xipppy_capi.DigitalEventArray_swigregister
DigitalEventArray_swigregister(DigitalEventArray)

def DigitalEventArray_frompointer(*args) -> "DigitalEventArray *" :
  return _xipppy_capi.DigitalEventArray_frompointer(*args)
DigitalEventArray_frompointer = _xipppy_capi.DigitalEventArray_frompointer

class I16Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, I16Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, I16Array, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _xipppy_capi.new_I16Array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xipppy_capi.delete_I16Array
    __del__ = lambda self : None;
    def __getitem__(self, *args) -> "int16_t" : return _xipppy_capi.I16Array___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _xipppy_capi.I16Array___setitem__(self, *args)
    def cast(self) -> "int16_t *" : return _xipppy_capi.I16Array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _xipppy_capi.I16Array_frompointer
    if _newclass:frompointer = staticmethod(_xipppy_capi.I16Array_frompointer)
I16Array_swigregister = _xipppy_capi.I16Array_swigregister
I16Array_swigregister(I16Array)

def I16Array_frompointer(*args) -> "I16Array *" :
  return _xipppy_capi.I16Array_frompointer(*args)
I16Array_frompointer = _xipppy_capi.I16Array_frompointer

class StimSeqArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StimSeqArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StimSeqArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _xipppy_capi.new_StimSeqArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xipppy_capi.delete_StimSeqArray
    __del__ = lambda self : None;
    def __getitem__(self, *args) -> "StimSeq_t" : return _xipppy_capi.StimSeqArray___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _xipppy_capi.StimSeqArray___setitem__(self, *args)
    def cast(self) -> "StimSeq_t *" : return _xipppy_capi.StimSeqArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _xipppy_capi.StimSeqArray_frompointer
    if _newclass:frompointer = staticmethod(_xipppy_capi.StimSeqArray_frompointer)
StimSeqArray_swigregister = _xipppy_capi.StimSeqArray_swigregister
StimSeqArray_swigregister(StimSeqArray)

def StimSeqArray_frompointer(*args) -> "StimSeqArray *" :
  return _xipppy_capi.StimSeqArray_frompointer(*args)
StimSeqArray_frompointer = _xipppy_capi.StimSeqArray_frompointer


def xl_open_tcp() -> "int" :
  return _xipppy_capi.xl_open_tcp()
xl_open_tcp = _xipppy_capi.xl_open_tcp

def xl_open_udp() -> "int" :
  return _xipppy_capi.xl_open_udp()
xl_open_udp = _xipppy_capi.xl_open_udp

def xl_close() -> "int" :
  return _xipppy_capi.xl_close()
xl_close = _xipppy_capi.xl_close

def xl_error_string(*args) -> "int" :
  return _xipppy_capi.xl_error_string(*args)
xl_error_string = _xipppy_capi.xl_error_string

def xl_cont_raw(*args) -> "int" :
  return _xipppy_capi.xl_cont_raw(*args)
xl_cont_raw = _xipppy_capi.xl_cont_raw

def xl_cont_hires(*args) -> "int" :
  return _xipppy_capi.xl_cont_hires(*args)
xl_cont_hires = _xipppy_capi.xl_cont_hires

def xl_cont_hifreq(*args) -> "int" :
  return _xipppy_capi.xl_cont_hifreq(*args)
xl_cont_hifreq = _xipppy_capi.xl_cont_hifreq

def xl_cont_lfp(*args) -> "int" :
  return _xipppy_capi.xl_cont_lfp(*args)
xl_cont_lfp = _xipppy_capi.xl_cont_lfp

def xl_cont_emg(*args) -> "int" :
  return _xipppy_capi.xl_cont_emg(*args)
xl_cont_emg = _xipppy_capi.xl_cont_emg

def xl_cont_status(*args) -> "int" :
  return _xipppy_capi.xl_cont_status(*args)
xl_cont_status = _xipppy_capi.xl_cont_status

def xl_stim_data(*args) -> "int" :
  return _xipppy_capi.xl_stim_data(*args)
xl_stim_data = _xipppy_capi.xl_stim_data

def xl_spk_data(*args) -> "int" :
  return _xipppy_capi.xl_spk_data(*args)
xl_spk_data = _xipppy_capi.xl_spk_data

def xl_spk_thresh(*args) -> "int" :
  return _xipppy_capi.xl_spk_thresh(*args)
xl_spk_thresh = _xipppy_capi.xl_spk_thresh

def xl_spk_thresh_set(*args) -> "int" :
  return _xipppy_capi.xl_spk_thresh_set(*args)
xl_spk_thresh_set = _xipppy_capi.xl_spk_thresh_set

def xl_digin(*args) -> "int" :
  return _xipppy_capi.xl_digin(*args)
xl_digin = _xipppy_capi.xl_digin

def xl_digout(*args) -> "int" :
  return _xipppy_capi.xl_digout(*args)
xl_digout = _xipppy_capi.xl_digout

def xl_list_elec(*args) -> "int" :
  return _xipppy_capi.xl_list_elec(*args)
xl_list_elec = _xipppy_capi.xl_list_elec

def xl_time() -> "unsigned int" :
  return _xipppy_capi.xl_time()
xl_time = _xipppy_capi.xl_time

def xl_get_fe(*args) -> "int" :
  return _xipppy_capi.xl_get_fe(*args)
xl_get_fe = _xipppy_capi.xl_get_fe

def xl_get_fe_streams(*args) -> "int" :
  return _xipppy_capi.xl_get_fe_streams(*args)
xl_get_fe_streams = _xipppy_capi.xl_get_fe_streams

def xl_nip_serial(*args) -> "int" :
  return _xipppy_capi.xl_nip_serial(*args)
xl_nip_serial = _xipppy_capi.xl_nip_serial

def xl_nipexec_version(*args) -> "int" :
  return _xipppy_capi.xl_nipexec_version(*args)
xl_nipexec_version = _xipppy_capi.xl_nipexec_version

def xl_fe_version(*args) -> "int" :
  return _xipppy_capi.xl_fe_version(*args)
xl_fe_version = _xipppy_capi.xl_fe_version

def xl_signal(*args) -> "int" :
  return _xipppy_capi.xl_signal(*args)
xl_signal = _xipppy_capi.xl_signal

def xl_signal_raw(*args) -> "int" :
  return _xipppy_capi.xl_signal_raw(*args)
xl_signal_raw = _xipppy_capi.xl_signal_raw

def xl_signal_lfp(*args) -> "int" :
  return _xipppy_capi.xl_signal_lfp(*args)
xl_signal_lfp = _xipppy_capi.xl_signal_lfp

def xl_signal_spk(*args) -> "int" :
  return _xipppy_capi.xl_signal_spk(*args)
xl_signal_spk = _xipppy_capi.xl_signal_spk

def xl_signal_stim(*args) -> "int" :
  return _xipppy_capi.xl_signal_stim(*args)
xl_signal_stim = _xipppy_capi.xl_signal_stim

def xl_signal_set(*args) -> "int" :
  return _xipppy_capi.xl_signal_set(*args)
xl_signal_set = _xipppy_capi.xl_signal_set

def xl_signal_set_raw(*args) -> "int" :
  return _xipppy_capi.xl_signal_set_raw(*args)
xl_signal_set_raw = _xipppy_capi.xl_signal_set_raw

def xl_signal_set_lfp(*args) -> "int" :
  return _xipppy_capi.xl_signal_set_lfp(*args)
xl_signal_set_lfp = _xipppy_capi.xl_signal_set_lfp

def xl_signal_set_spk(*args) -> "int" :
  return _xipppy_capi.xl_signal_set_spk(*args)
xl_signal_set_spk = _xipppy_capi.xl_signal_set_spk

def xl_signal_set_stim(*args) -> "int" :
  return _xipppy_capi.xl_signal_set_stim(*args)
xl_signal_set_stim = _xipppy_capi.xl_signal_set_stim

def xl_signal_save(*args) -> "int" :
  return _xipppy_capi.xl_signal_save(*args)
xl_signal_save = _xipppy_capi.xl_signal_save

def xl_signal_save_set(*args) -> "int" :
  return _xipppy_capi.xl_signal_save_set(*args)
xl_signal_save_set = _xipppy_capi.xl_signal_save_set

def xl_stim_enable_set(*args) -> "int" :
  return _xipppy_capi.xl_stim_enable_set(*args)
xl_stim_enable_set = _xipppy_capi.xl_stim_enable_set

def xl_stim_enable() -> "int" :
  return _xipppy_capi.xl_stim_enable()
xl_stim_enable = _xipppy_capi.xl_stim_enable

def xl_stim_get_res(*args) -> "int" :
  return _xipppy_capi.xl_stim_get_res(*args)
xl_stim_get_res = _xipppy_capi.xl_stim_get_res

def xl_stim_set_res(*args) -> "int" :
  return _xipppy_capi.xl_stim_set_res(*args)
xl_stim_set_res = _xipppy_capi.xl_stim_set_res

def xl_stim_header_word(*args) -> "int" :
  return _xipppy_capi.xl_stim_header_word(*args)
xl_stim_header_word = _xipppy_capi.xl_stim_header_word

def xl_stim_word(*args) -> "int" :
  return _xipppy_capi.xl_stim_word(*args)
xl_stim_word = _xipppy_capi.xl_stim_word

def xl_stim_seq(*args) -> "int" :
  return _xipppy_capi.xl_stim_seq(*args)
xl_stim_seq = _xipppy_capi.xl_stim_seq

def xl_filter_list_names(*args) -> "int" :
  return _xipppy_capi.xl_filter_list_names(*args)
xl_filter_list_names = _xipppy_capi.xl_filter_list_names

def xl_filter_list_selection(*args) -> "int" :
  return _xipppy_capi.xl_filter_list_selection(*args)
xl_filter_list_selection = _xipppy_capi.xl_filter_list_selection

def xl_filter_set(*args) -> "int" :
  return _xipppy_capi.xl_filter_set(*args)
xl_filter_set = _xipppy_capi.xl_filter_set

def xl_filter_get_desc(*args) -> "SosFilterDesc_t *" :
  return _xipppy_capi.xl_filter_get_desc(*args)
xl_filter_get_desc = _xipppy_capi.xl_filter_get_desc

def xl_filter_set_custom(*args) -> "int" :
  return _xipppy_capi.xl_filter_set_custom(*args)
xl_filter_set_custom = _xipppy_capi.xl_filter_set_custom

def xl_imp(*args) -> "int" :
  return _xipppy_capi.xl_imp(*args)
xl_imp = _xipppy_capi.xl_imp

def xl_fast_settle_get_choices(*args) -> "int" :
  return _xipppy_capi.xl_fast_settle_get_choices(*args)
xl_fast_settle_get_choices = _xipppy_capi.xl_fast_settle_get_choices

def xl_fast_settle_get_duration(*args) -> "int" :
  return _xipppy_capi.xl_fast_settle_get_duration(*args)
xl_fast_settle_get_duration = _xipppy_capi.xl_fast_settle_get_duration

def xl_fast_settle(*args) -> "int" :
  return _xipppy_capi.xl_fast_settle(*args)
xl_fast_settle = _xipppy_capi.xl_fast_settle

def xl_transceiver_enable(*args) -> "int" :
  return _xipppy_capi.xl_transceiver_enable(*args)
xl_transceiver_enable = _xipppy_capi.xl_transceiver_enable

def xl_transceiver_status(*args) -> "int" :
  return _xipppy_capi.xl_transceiver_status(*args)
xl_transceiver_status = _xipppy_capi.xl_transceiver_status

def xl_transceiver_command(*args) -> "int" :
  return _xipppy_capi.xl_transceiver_command(*args)
xl_transceiver_command = _xipppy_capi.xl_transceiver_command

def xl_hw_ground(*args) -> "int" :
  return _xipppy_capi.xl_hw_ground(*args)
xl_hw_ground = _xipppy_capi.xl_hw_ground

def xl_hw_reference(*args) -> "int" :
  return _xipppy_capi.xl_hw_reference(*args)
xl_hw_reference = _xipppy_capi.xl_hw_reference
class XippSensor_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XippSensor_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XippSensor_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["current"] = _xipppy_capi.XippSensor_t_current_set
    __swig_getmethods__["current"] = _xipppy_capi.XippSensor_t_current_get
    if _newclass:current = _swig_property(_xipppy_capi.XippSensor_t_current_get, _xipppy_capi.XippSensor_t_current_set)
    __swig_setmethods__["voltage"] = _xipppy_capi.XippSensor_t_voltage_set
    __swig_getmethods__["voltage"] = _xipppy_capi.XippSensor_t_voltage_get
    if _newclass:voltage = _swig_property(_xipppy_capi.XippSensor_t_voltage_get, _xipppy_capi.XippSensor_t_voltage_set)
    __swig_setmethods__["power"] = _xipppy_capi.XippSensor_t_power_set
    __swig_getmethods__["power"] = _xipppy_capi.XippSensor_t_power_get
    if _newclass:power = _swig_property(_xipppy_capi.XippSensor_t_power_get, _xipppy_capi.XippSensor_t_power_set)
    def __init__(self): 
        this = _xipppy_capi.new_XippSensor_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xipppy_capi.delete_XippSensor_t
    __del__ = lambda self : None;
XippSensor_t_swigregister = _xipppy_capi.XippSensor_t_swigregister
XippSensor_t_swigregister(XippSensor_t)


def xl_internal_battery(*args) -> "int" :
  return _xipppy_capi.xl_internal_battery(*args)
xl_internal_battery = _xipppy_capi.xl_internal_battery

def xl_external_battery(*args) -> "int" :
  return _xipppy_capi.xl_external_battery(*args)
xl_external_battery = _xipppy_capi.xl_external_battery

def xl_external_battery_detected(*args) -> "int" :
  return _xipppy_capi.xl_external_battery_detected(*args)
xl_external_battery_detected = _xipppy_capi.xl_external_battery_detected

def xl_wall_sensor(*args) -> "int" :
  return _xipppy_capi.xl_wall_sensor(*args)
xl_wall_sensor = _xipppy_capi.xl_wall_sensor

def xl_vdd_sensor(*args) -> "int" :
  return _xipppy_capi.xl_vdd_sensor(*args)
xl_vdd_sensor = _xipppy_capi.xl_vdd_sensor

def xl_audio_tone_set(*args) -> "int" :
  return _xipppy_capi.xl_audio_tone_set(*args)
xl_audio_tone_set = _xipppy_capi.xl_audio_tone_set

def xl_stim_calib_set(*args) -> "int" :
  return _xipppy_capi.xl_stim_calib_set(*args)
xl_stim_calib_set = _xipppy_capi.xl_stim_calib_set

def xl_stim_calib_get(*args) -> "XippCalib_t *" :
  return _xipppy_capi.xl_stim_calib_get(*args)
xl_stim_calib_get = _xipppy_capi.xl_stim_calib_get

def xl_stim_calib_start(*args) -> "int" :
  return _xipppy_capi.xl_stim_calib_start(*args)
xl_stim_calib_start = _xipppy_capi.xl_stim_calib_start
XL_BUTTON_STOP_STIM = _xipppy_capi.XL_BUTTON_STOP_STIM
XL_BUTTON_EVENT = _xipppy_capi.XL_BUTTON_EVENT
XL_BUTTON_F1 = _xipppy_capi.XL_BUTTON_F1
XL_BUTTON_F2 = _xipppy_capi.XL_BUTTON_F2
XL_LED_EVENT = _xipppy_capi.XL_LED_EVENT
XL_LED_F1 = _xipppy_capi.XL_LED_F1
XL_LED_F2 = _xipppy_capi.XL_LED_F2

def xl_button_get_count(*args) -> "int" :
  return _xipppy_capi.xl_button_get_count(*args)
xl_button_get_count = _xipppy_capi.xl_button_get_count

def xl_button_set_monitor(*args) -> "int" :
  return _xipppy_capi.xl_button_set_monitor(*args)
xl_button_set_monitor = _xipppy_capi.xl_button_set_monitor

def xl_led_set(*args) -> "int" :
  return _xipppy_capi.xl_led_set(*args)
xl_led_set = _xipppy_capi.xl_led_set

def xl_led_set_monitor(*args) -> "int" :
  return _xipppy_capi.xl_led_set_monitor(*args)
xl_led_set_monitor = _xipppy_capi.xl_led_set_monitor

def xl_led(*args) -> "int" :
  return _xipppy_capi.xl_led(*args)
xl_led = _xipppy_capi.xl_led

def xl_processor_restart_software() -> "int" :
  return _xipppy_capi.xl_processor_restart_software()
xl_processor_restart_software = _xipppy_capi.xl_processor_restart_software
class XippErrorMessage_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XippErrorMessage_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XippErrorMessage_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["error_code"] = _xipppy_capi.XippErrorMessage_t_error_code_set
    __swig_getmethods__["error_code"] = _xipppy_capi.XippErrorMessage_t_error_code_get
    if _newclass:error_code = _swig_property(_xipppy_capi.XippErrorMessage_t_error_code_get, _xipppy_capi.XippErrorMessage_t_error_code_set)
    __swig_setmethods__["error_time"] = _xipppy_capi.XippErrorMessage_t_error_time_set
    __swig_getmethods__["error_time"] = _xipppy_capi.XippErrorMessage_t_error_time_get
    if _newclass:error_time = _swig_property(_xipppy_capi.XippErrorMessage_t_error_time_get, _xipppy_capi.XippErrorMessage_t_error_time_set)
    __swig_setmethods__["reserved"] = _xipppy_capi.XippErrorMessage_t_reserved_set
    __swig_getmethods__["reserved"] = _xipppy_capi.XippErrorMessage_t_reserved_get
    if _newclass:reserved = _swig_property(_xipppy_capi.XippErrorMessage_t_reserved_get, _xipppy_capi.XippErrorMessage_t_reserved_set)
    __swig_setmethods__["module_id"] = _xipppy_capi.XippErrorMessage_t_module_id_set
    __swig_getmethods__["module_id"] = _xipppy_capi.XippErrorMessage_t_module_id_get
    if _newclass:module_id = _swig_property(_xipppy_capi.XippErrorMessage_t_module_id_get, _xipppy_capi.XippErrorMessage_t_module_id_set)
    __swig_setmethods__["port_id"] = _xipppy_capi.XippErrorMessage_t_port_id_set
    __swig_getmethods__["port_id"] = _xipppy_capi.XippErrorMessage_t_port_id_get
    if _newclass:port_id = _swig_property(_xipppy_capi.XippErrorMessage_t_port_id_get, _xipppy_capi.XippErrorMessage_t_port_id_set)
    __swig_setmethods__["slot_id"] = _xipppy_capi.XippErrorMessage_t_slot_id_set
    __swig_getmethods__["slot_id"] = _xipppy_capi.XippErrorMessage_t_slot_id_get
    if _newclass:slot_id = _swig_property(_xipppy_capi.XippErrorMessage_t_slot_id_get, _xipppy_capi.XippErrorMessage_t_slot_id_set)
    __swig_setmethods__["message"] = _xipppy_capi.XippErrorMessage_t_message_set
    __swig_getmethods__["message"] = _xipppy_capi.XippErrorMessage_t_message_get
    if _newclass:message = _swig_property(_xipppy_capi.XippErrorMessage_t_message_get, _xipppy_capi.XippErrorMessage_t_message_set)
    def __init__(self, *args): 
        this = _xipppy_capi.new_XippErrorMessage_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xipppy_capi.delete_XippErrorMessage_t
    __del__ = lambda self : None;
    def __str__(self) -> "char *" : return _xipppy_capi.XippErrorMessage_t___str__(self)
XippErrorMessage_t_swigregister = _xipppy_capi.XippErrorMessage_t_swigregister
XippErrorMessage_t_swigregister(XippErrorMessage_t)


def xl_error_check() -> "int" :
  return _xipppy_capi.xl_error_check()
xl_error_check = _xipppy_capi.xl_error_check

def xl_py_error_getall() -> "PyObject *" :
  return _xipppy_capi.xl_py_error_getall()
xl_py_error_getall = _xipppy_capi.xl_py_error_getall
XL_CONNECT_POLICY_DEFAULT = _xipppy_capi.XL_CONNECT_POLICY_DEFAULT
XL_CONNECT_POLICY_PREFER_WIRED = _xipppy_capi.XL_CONNECT_POLICY_PREFER_WIRED
XL_CONNECT_POLICY_PREFER_WIRELESS = _xipppy_capi.XL_CONNECT_POLICY_PREFER_WIRELESS
XL_CONNECT_POLICY_WIRED_ONLY = _xipppy_capi.XL_CONNECT_POLICY_WIRED_ONLY
XL_CONNECT_POLICY_WIRELESS_ONLY = _xipppy_capi.XL_CONNECT_POLICY_WIRELESS_ONLY
XL_CONNECT_TYPE_DEFAULT = _xipppy_capi.XL_CONNECT_TYPE_DEFAULT
XL_CONNECT_TYPE_TCP = _xipppy_capi.XL_CONNECT_TYPE_TCP
XL_CONNECT_TYPE_UDP = _xipppy_capi.XL_CONNECT_TYPE_UDP
class XippConnectionOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XippConnectionOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XippConnectionOptions, name)
    __repr__ = _swig_repr
    __swig_setmethods__["policy"] = _xipppy_capi.XippConnectionOptions_policy_set
    __swig_getmethods__["policy"] = _xipppy_capi.XippConnectionOptions_policy_get
    if _newclass:policy = _swig_property(_xipppy_capi.XippConnectionOptions_policy_get, _xipppy_capi.XippConnectionOptions_policy_set)
    __swig_setmethods__["type"] = _xipppy_capi.XippConnectionOptions_type_set
    __swig_getmethods__["type"] = _xipppy_capi.XippConnectionOptions_type_get
    if _newclass:type = _swig_property(_xipppy_capi.XippConnectionOptions_type_get, _xipppy_capi.XippConnectionOptions_type_set)
    __swig_setmethods__["timeout"] = _xipppy_capi.XippConnectionOptions_timeout_set
    __swig_getmethods__["timeout"] = _xipppy_capi.XippConnectionOptions_timeout_get
    if _newclass:timeout = _swig_property(_xipppy_capi.XippConnectionOptions_timeout_get, _xipppy_capi.XippConnectionOptions_timeout_set)
    def __init__(self): 
        this = _xipppy_capi.new_XippConnectionOptions()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xipppy_capi.delete_XippConnectionOptions
    __del__ = lambda self : None;
XippConnectionOptions_swigregister = _xipppy_capi.XippConnectionOptions_swigregister
XippConnectionOptions_swigregister(XippConnectionOptions)


def xl_processor_status(*args) -> "int" :
  return _xipppy_capi.xl_processor_status(*args)
xl_processor_status = _xipppy_capi.xl_processor_status
class XippTrialDescriptor_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XippTrialDescriptor_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XippTrialDescriptor_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["status"] = _xipppy_capi.XippTrialDescriptor_t_status_set
    __swig_getmethods__["status"] = _xipppy_capi.XippTrialDescriptor_t_status_get
    if _newclass:status = _swig_property(_xipppy_capi.XippTrialDescriptor_t_status_get, _xipppy_capi.XippTrialDescriptor_t_status_set)
    __swig_setmethods__["status_size"] = _xipppy_capi.XippTrialDescriptor_t_status_size_set
    __swig_getmethods__["status_size"] = _xipppy_capi.XippTrialDescriptor_t_status_size_get
    if _newclass:status_size = _swig_property(_xipppy_capi.XippTrialDescriptor_t_status_size_get, _xipppy_capi.XippTrialDescriptor_t_status_size_set)
    __swig_setmethods__["file_name_base"] = _xipppy_capi.XippTrialDescriptor_t_file_name_base_set
    __swig_getmethods__["file_name_base"] = _xipppy_capi.XippTrialDescriptor_t_file_name_base_get
    if _newclass:file_name_base = _swig_property(_xipppy_capi.XippTrialDescriptor_t_file_name_base_get, _xipppy_capi.XippTrialDescriptor_t_file_name_base_set)
    __swig_setmethods__["file_name_base_size"] = _xipppy_capi.XippTrialDescriptor_t_file_name_base_size_set
    __swig_getmethods__["file_name_base_size"] = _xipppy_capi.XippTrialDescriptor_t_file_name_base_size_get
    if _newclass:file_name_base_size = _swig_property(_xipppy_capi.XippTrialDescriptor_t_file_name_base_size_get, _xipppy_capi.XippTrialDescriptor_t_file_name_base_size_set)
    __swig_setmethods__["error_msg"] = _xipppy_capi.XippTrialDescriptor_t_error_msg_set
    __swig_getmethods__["error_msg"] = _xipppy_capi.XippTrialDescriptor_t_error_msg_get
    if _newclass:error_msg = _swig_property(_xipppy_capi.XippTrialDescriptor_t_error_msg_get, _xipppy_capi.XippTrialDescriptor_t_error_msg_set)
    __swig_setmethods__["error_msg_size"] = _xipppy_capi.XippTrialDescriptor_t_error_msg_size_set
    __swig_getmethods__["error_msg_size"] = _xipppy_capi.XippTrialDescriptor_t_error_msg_size_get
    if _newclass:error_msg_size = _swig_property(_xipppy_capi.XippTrialDescriptor_t_error_msg_size_get, _xipppy_capi.XippTrialDescriptor_t_error_msg_size_set)
    __swig_setmethods__["auto_stop_time"] = _xipppy_capi.XippTrialDescriptor_t_auto_stop_time_set
    __swig_getmethods__["auto_stop_time"] = _xipppy_capi.XippTrialDescriptor_t_auto_stop_time_get
    if _newclass:auto_stop_time = _swig_property(_xipppy_capi.XippTrialDescriptor_t_auto_stop_time_get, _xipppy_capi.XippTrialDescriptor_t_auto_stop_time_set)
    __swig_setmethods__["auto_incr"] = _xipppy_capi.XippTrialDescriptor_t_auto_incr_set
    __swig_getmethods__["auto_incr"] = _xipppy_capi.XippTrialDescriptor_t_auto_incr_get
    if _newclass:auto_incr = _swig_property(_xipppy_capi.XippTrialDescriptor_t_auto_incr_get, _xipppy_capi.XippTrialDescriptor_t_auto_incr_set)
    __swig_setmethods__["incr_num"] = _xipppy_capi.XippTrialDescriptor_t_incr_num_set
    __swig_getmethods__["incr_num"] = _xipppy_capi.XippTrialDescriptor_t_incr_num_get
    if _newclass:incr_num = _swig_property(_xipppy_capi.XippTrialDescriptor_t_incr_num_get, _xipppy_capi.XippTrialDescriptor_t_incr_num_set)
    def __init__(self): 
        this = _xipppy_capi.new_XippTrialDescriptor_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xipppy_capi.delete_XippTrialDescriptor_t
    __del__ = lambda self : None;
XippTrialDescriptor_t_swigregister = _xipppy_capi.XippTrialDescriptor_t_swigregister
XippTrialDescriptor_t_swigregister(XippTrialDescriptor_t)
cvar = _xipppy_capi.cvar
XL_DEFAULT_STATUS_CONNECTION_OPTIONS = cvar.XL_DEFAULT_STATUS_CONNECTION_OPTIONS


def xl_operator_add(*args) -> "int" :
  return _xipppy_capi.xl_operator_add(*args)
xl_operator_add = _xipppy_capi.xl_operator_add

def xl_operator_lookup(*args) -> "int" :
  return _xipppy_capi.xl_operator_lookup(*args)
xl_operator_lookup = _xipppy_capi.xl_operator_lookup

def xl_trial2(*args) -> "int" :
  return _xipppy_capi.xl_trial2(*args)
xl_trial2 = _xipppy_capi.xl_trial2
# This file is compatible with both classic and new-style classes.


